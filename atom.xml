<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[11IT]]></title>
  <link href="http://www.11it.com/atom.xml" rel="self"/>
  <link href="http://www.11it.com/"/>
  <updated>2013-05-22T15:56:51+08:00</updated>
  <id>http://www.11it.com/</id>
  <author>
    <name><![CDATA[Jacky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C的新特性]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/objective-cde-xin-te-xing/"/>
    <updated>2013-05-22T15:43:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/objective-cde-xin-te-xing</id>
    <content type="html"><![CDATA[<blockquote>
苹果在今年的WWDC2012大会上介绍了大量Objective-C的新特性，能够帮助iOS程序员更加高效地编写代码。在不久前更新的XCode4.4版本中，这些新特性已经可以使用了。让我们看看这些新特性有哪些：
</blockquote>


<h2>Object Literals</h2>

<p>这个是我认为最赞的一个改进。Object Literals允许你方便地定义数字、数组和字典对象。这个功能类似于java5提供的auto boxing功能。这虽然是一个语法糖，但我认为对提高写代码效率帮助很大。</p>

<!-- more -->


<p>让我们先来看看以前定义数字、数组和字典对象的方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber * number = [NSNumber numberWithInt:1];
</span><span class='line'>NSArray * array = [NSArray arrayWithObjects:@"one", @"two", nil];
</span><span class='line'>NSDictionary * dict = [NSDictionary dictionaryWithObjectsAndKeys:@"value1", @"key1", @"value2", @"key2", nil];</span></code></pre></td></tr></table></div></figure>


<p>是不是很恶心？现在以上代码可以简化成以下形式，注意到没有，不用再在参数的最后加恶心的nil了，字典的key和value也不再是倒着先写value,再写key了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber * number = @1;
</span><span class='line'>NSArray * array = @[@"one", @"two"];
</span><span class='line'>NSDictionary * dict = @{@"key1":@"value1", @"key2":@"value2"};</span></code></pre></td></tr></table></div></figure>


<p>更多的示例如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> // 整数
</span><span class='line'>  NSNumber *fortyTwo = @42;             // 等价于 [NSNumber numberWithInt:42]
</span><span class='line'>  NSNumber *fortyTwoUnsigned = @42U;    // 等价于 [NSNumber numberWithUnsignedInt:42U]
</span><span class='line'>  NSNumber *fortyTwoLong = @42L;        // 等价于 [NSNumber numberWithLong:42L]
</span><span class='line'>  NSNumber *fortyTwoLongLong = @42LL;   // 等价于 [NSNumber numberWithLongLong:42LL]
</span><span class='line'>
</span><span class='line'>  // 浮点数
</span><span class='line'>  NSNumber *piFloat = @3.141592654F;    // 等价于 [NSNumber numberWithFloat:3.141592654F]
</span><span class='line'>  NSNumber *piDouble = @3.1415926535;   // 等价于 [NSNumber numberWithDouble:3.1415926535]
</span><span class='line'>
</span><span class='line'>  // 布尔值
</span><span class='line'>  NSNumber *yesNumber = @YES;           // 等价于 [NSNumber numberWithBool:YES]
</span><span class='line'>  NSNumber *noNumber = @NO;             // 等价于 [NSNumber numberWithBool:NO]
</span><span class='line'>
</span><span class='line'>  // 空数组
</span><span class='line'>  NSArray * array = @[];                // 等价于 [NSArray array]
</span><span class='line'>  // 空的字典
</span><span class='line'>  NSDictionary * dict = @{};            // 等价于 [NSDictionary dictionary]</span></code></pre></td></tr></table></div></figure>


<p>怎么样？是不是简单多了？而且，为了方便你的旧代码迁移到新的写法，xcode专门还提供了转换工具，在xcode4.4中，选择 Edit &ndash;> Refactor &ndash;> Convert to Modern Objective-C Syntax即可。如下所示：</p>

<p><img src="http://blog.devtang.com/images/modern-objc-convert-tool.jpg" alt="" /></p>

<hr />

<h2>局部的函数调用不用前向申明</h2>

<p>这虽然是一个挺小的改进，但是很贴心。假如我们在一个源文件中有2个函数：分别名为foo 和 bar，其中foo的定义在bar前面。那如果在foo函数内部直接调用bar，编译器会报警告说找不到函数bar。</p>

<p>而现在，我们可以随意地在源文件中放置函数bar的位置。编译器在找不到bar时，会再源码后面找，如果找到了bar，就不会报错了。</p>

<h2>带有类型的enum</h2>

<p>现在我们可以定义enum是无符号整数还是整数，这样编译器会更加智能的做类型检查。如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef enum TableViewCellType : NSInteger {
</span><span class='line'>    TableViewCellTypeQueue,
</span><span class='line'>    TableViewCellTypeNewFans,
</span><span class='line'>    TableViewCellTypeUserInfo,
</span><span class='line'>    TableViewCellTypeOrganization,
</span><span class='line'>    TableViewCellTypeFeedback,
</span><span class='line'>    TableViewCellTypeRateApp,
</span><span class='line'>    TableViewCellTypeRecommendation,
</span><span class='line'>    TableViewCellTypeLogout
</span><span class='line'>}TableViewCellType;</span></code></pre></td></tr></table></div></figure>


<h2>默认生成@synthesize代码</h2>

<p>以前写完一个诸如 @property (nonatomic, strong) NSString * username; 变量定义后，马上得转到 .m文件中去增加相应的 @synthesize username = _username; 代码。</p>

<p>现在，编辑器发现你没有写 @synthesize时，会自动帮你加上这一行。这同时在另一方面，起到了鼓励大家使用以下划线开头的变量名作为成员变量名的作用。</p>

<p>当然，为了向下兼容，如果你的程序里面已经有了 @property 变量对应的 @synthesize 代码时，编辑器就不会自动帮你增加这个代码了。</p>

<p>另外有2种特殊情况下，即使你没有写 @synthesize ，编辑器也不会自动帮你加上，这2种情况是：</p>

<p>你同时提供了该property的setter 和 getter方法。
你的这个property是 readonly 的。</p>

<h2>遍历元素</h2>

<p>你是如何遍历数组的元素的？通常我们有2种做法，一种是用 for in，另一种是用一个变量来循环数组下标。如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray * lines = ...
</span><span class='line'>    for (NSString * line in lines) {
</span><span class='line'>       // ...
</span><span class='line'>    }
</span><span class='line'>    for (int i = 0; i &lt; lines.count; ++i) {
</span><span class='line'>        NSString * s = [lines objectAtIndex:i];
</span><span class='line'>        ...
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>如果是字典，遍历的代码就要稍微复杂一点了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSDictionary * dict = …
</span><span class='line'>    NSArray * keys = [dict allKeys];
</span><span class='line'>    for (NSString * key in keys) {
</span><span class='line'>        NSString * value = [dict objectForKey:key];
</span><span class='line'>
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>现在，xcode对于iOS4.0以上的系统，支持用block来遍历元素了。用block来遍历字典可以简化代码的编写，建议大家都使用上这个新特性。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[lines enumerateObjectsUsingBlock:^(NSString * obj, NSUInteger idx, BOOL *stop) {
</span><span class='line'>
</span><span class='line'>}];
</span><span class='line'>
</span><span class='line'>[_urlArguments enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {
</span><span class='line'>
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<h2>Subscripting Methods</h2>

<p>这个新特性在WWDC2012的视频中提到了，但是在XCode4.4中没有实现（在XCode4.5中实现了）。也是一个很体贴的语法糖，它允许你用中括号来代替原本的方法来获取和设置数组元素。</p>

<p>简单来说，以前的 [array objectAtIndex:idx] 和 [array replaceObjectAtIndex:idx withObject:obj]，可以直接写作 array[idx] 和 array[idx] = obj了。其实这个特性在很多高级语言中都实现了，只是Objective-C生于80年代，一直没改进这个。</p>

<p>以下是一些示例代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray * array = @[ @"111", @"222", @"333"];
</span><span class='line'>for (int i = 0; i &lt; 3; ++i) {
</span><span class='line'>    NSLog(@"array[i] = %@", array[i]);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>NSMutableDictionary * dict =[@{  @1: @"value1",
</span><span class='line'>                                 @2: @"value2",
</span><span class='line'>                                 @3: @"value3" } mutableCopy];
</span><span class='line'>for (int i = 0; i &lt; 3; ++i) {
</span><span class='line'>    NSLog(@"dict[%d] = %@", i, dict[@(i+1)]);
</span><span class='line'>    dict[@(i+1)] = [NSString stringWithFormat:@"new %@", dict[@(i+1)]];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>[dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {
</span><span class='line'>    NSLog(@"dict[%@] = %@", key, dict[key]);
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>这个改进同样对NSDictionary有效。甚至，你也可以给你自己的类提供中括号操作符对应的方法。具体做法是实现如下两个方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)objectAtIndexedSubscript:(NSUInterger)idx;
</span><span class='line'>- (void)setObject:(id)value atIndexedSubscript:(NSUInteger)idx;</span></code></pre></td></tr></table></div></figure>


<h2>Tips</h2>

<p>上面提到了不用写 @synthesize 了，那原本写的那么多 @synthesize 怎么办呢？作为有代码洁癖的我很想把它们删掉，但怎么删呢？一个文件一个文件打开，然后行一行删掉吗？放心，苹果已经帮我们想了解决方案。在WWDC2012 Session 400 Developer Tools Kickoff 中，苹果介绍了具体做法。步骤如下：</p>

<p>首先使用区域查找，因为一般项目都会依赖第三方的开源库，我们可不想更改别人的库，所以我们只查找我们库中的文件，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/modern-objc-remove-synthesize-1.png" alt="" /></p>

<ol>
<li>接着我们用正则匹配，找到以 @synthesize开头，后面接着是 var = _var; 格式的行。插入正则表达式很简单，直接点击查找输入框左边的放大镜，选择“insert pattern”，苹果就会把常见的正则表达式都列出来，你直接选择就可以了，非常方便。如下图所示：</li>
</ol>


<p><img src="http://blog.devtang.com/images/modern-objc-insert-pattern.png" alt="" /></p>

<p>在插入好合适的正则表达式后，我们按回车，就可以搜索到结果。</p>

<p><img src="http://blog.devtang.com/images/modern-objc-search-result.png" alt="" /></p>

<ol>
<li>我们点击搜索界面的preview按钮，查看替换效果，可以看到，对于我们测试代码，XCode生成的预览图已经正确地当对应代码删掉了。然后我们就可以点击替换，去掉所有的 @synthesize 代码了。</li>
</ol>


<p><img src="http://blog.devtang.com/images/modern-objc-replace-review.png" alt="" /></p>

<p>在下载完XCode4.4后，我就把我们的工程代码都转换成了新特性的语法。在转换后，我发现原本25000行的代码少了将近1000行。心里还是很开心的，因为又可以少写一些体力活类型的代码了。</p>

<p>还是那句话，希望这些新特性能够让大家玩得开心。</p>

<h2>参考资料</h2>

<ul>
<li>LLVM官方网站比较全面地介绍了 Object Literal： <a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">http://clang.llvm.org/docs/ObjectiveCLiterals.html</a></li>
<li>WWDC2012 Session 400 Developer Tools Kickoff</li>
<li>WWDC2012 Session 405 Modern Objective-C</li>
<li>WWDC2012 Session 413 Migrating to Modern Objective-C</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何让 Instagram 在一百多万用户爆炸后稳定运行]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/ru-he-rang-instagram-zai-%5B%3F%5D-bai-duo-mo-yong-hu-bao-zha-hou-wen-ding-yun-xing/"/>
    <updated>2013-05-22T15:23:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/ru-he-rang-instagram-zai-[?]-bai-duo-mo-yong-hu-bao-zha-hou-wen-ding-yun-xing</id>
    <content type="html"><![CDATA[<p>原文链接：Keeping Instagram up with over a million new users in twelve hours</p>

<blockquote>
这周二我们发布了 Instagram for Android，反响空前强烈。 最近这几周我们一直（在基础设施方面）做负载计划，为所有可能发生的事故做准备。 尽管如此，在发布那天，最大的挑战仍然是如何快速定位问题，找到瓶颈并尽快修复他们。 在这里我们将分享一些帮助我们解决问题的工具和技术。
</blockquote>


<h2>statsd</h2>

<p>statsd 在 Instagram 很受欢迎。这是 Etsy 写的一个网络监控器， 能够统计并图形化数据。它有两种核心的统计方式：计数器和计时器。 我们用计数器来跟踪许多信息，从每秒钟注册数到喜欢数量统计。 同时我们使用计时器来跟踪 feeds 变化，用户停留在 feeds 多久，和其他的主要操作。</p>

<p>我们喜欢 statsd 的最大原因是它能迅速将状态显示并图形化出来。 Stats 几乎是实时的（在我们系统中有 10 秒钟的延时） 帮助我们评估系统状况和代码变化情况。 Stats 可以随意启用，当我们需要跟踪时，能够快速启用它。 你可以指定一个取样密度，来均匀的查看 web 应用概况， 而不会影响它运行效率。</p>

<p>总结：实时统计可以动态添加，帮助你线上诊断而无须等待问题重现。</p>

<!-- more -->


<hr />

<h2>Dogslow</h2>

<p>Bitbucket 出品，Dogslow 是一个 Django middleware，它能监视运行的进程， 当发现有进程运行时间超过 N 秒时，会保存当前进程信息的快照到磁盘。 一直开着它很耗性能，但当去定位突发问题的瓶颈时，就会非常有用（我们在 web 服务器上加了一个开关控制）。</p>

<p>在发布那天，我们发现很多运行时间超过 1.5s 的进程都卡在 memcached 的 set() 和 get_many() 方法上。我们使用 Munin 跟踪我们的机器状态，发现 memcached 每秒有 5 万次请求，因此，尽管还没到达 CPU 上限，却被 memcached 拖慢了应用服务器速度。</p>

<p>总结：瓶颈往往是后台的一个短板造成的，定位到底哪里卡下来能帮助找出问题根源。</p>

<hr />

<h2>Replication &amp; Read-slaves</h2>

<p>我们主要的两个数据源 Redis 和 PostgreSQL 都可以方便地主从分离。 当我们的 Redis 数据库到达每秒 4 万请求时候，开始成为瓶颈。我们在另外一台服务器 打开 SYNCing to the master，然后将读请求发送到这台服务器， 这些操作仅耗时 20 分钟。根据几个案例，有些机器的负载会偏离了我们预期， 所以我们会提前准备好从服务器，从而快速地分离出读请求。</p>

<p>比方说 Postgres，我们混合使用 Streaming Replication 和 Amazon EBS 快照来快速启动从服务器。所有从主 DB 到从服务器的数据不定时会有 EBS 快照。 根据这些快照，我们可以在 20 分钟内启动新的从服务器并通知主服务器。 在 AWS 这样的环境中，我们使用脚本和命令来很快的预判并部署新的从服务器。</p>

<p>总结：如果读能力会变成瓶颈，那就预先准备好从服务器，并让他们轮询服务。 一旦出现了新的读问题，要做的仅仅是加更多的读服务器到轮询中去。</p>

<hr />

<h2>PGFouine</h2>

<p>PGFouine 是一个分析 PostgreSQL 查询日志并生成查询结果的工具。 将最重、最常用、最慢的查询拆分出来。我们写了一个 Fabric 脚本来方便的使用它， 连接到一个数据库，然后等待 30 秒并记录下其中每条查询，把结果保存到本地再用 pgfouine 来分析，这里可以看到 as a gist。PGFouine 是我们用来分析数据库性能的核心工具。帮我们找出哪些查询应该被 memcached 缓存， 哪些查询了过度的数据等等。发布那天数据库出现了一点压力，我们就跑 PGFouine， 然后部署一些提升性能的代码来缓解压力，然后再跑一次 PGFouine 来确认效果。</p>

<p>知道平日里数据库表现性能很重要，因此我们也定期在无压力的服务器上统计信息。</p>

<p>总结：数据库日志分析（尤其注意迭代循环查询和缓存经常使用的数据）</p>

<hr />

<h2>One more thing</h2>

<p>另一个帮助我们顺利通过发布第一天的工具是我们自己写的一个 node.js 服务，node2dm， 用来推送通知消息到 Android C2DM 服务。它至今已经发送了 500 万条推送。</p>

<p>我们调查了一些支持 C2DM 的可用服务，但要么是开源包不那么被积极维护， 要么是不支持 Google 所有的功能。我们现在用 open sourcing node2dm， 你可以随意 forlk / pull-request 来帮助我们改进。</p>

<hr />

<h2>Interested?</h2>

<p>如果你对这些很感兴趣，你可以跟我们联系来获得工作机会，drop us a note， 我们需要知道你的想法。</p>

<p>你可以在 Hacker News 来 discuss this post。</p>

<p>—</p>

<p>Mike Krieger, co-founder</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch，再见]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/arch%2Czai-jian/"/>
    <updated>2013-05-22T15:03:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/arch,zai-jian</id>
    <content type="html"><![CDATA[<p><img src="http://upload.log4d.com/2013/04/archlinux-logo-dark-1200dpi_.png" alt="" /></p>

<p>Arch 是我真正使用的第一款 Linux 发行版，大约使用了三年， 现在的这个 VPS 跑的系统也是 Arch。 然而随着时间变化，我从最早的天天更新狂，到一周、一个月、三个月和不主动更新。 彻底从从不折腾会死星人变成了一个尽量避免变更的老用户。</p>

<!-- more -->


<p>Arch 很适合作为第二个（第一个是新手使用的 Ubuntu），它的哲学 KISS 非常优雅， Keep It Simple And Stupid。基于这原则，它将 Linux 内部的使用、运维细节都展现出来。 毫不夸张的说，被 Arch 折腾几年，就能胜任 Linux SA 的角色了（笑）。</p>

<p>可是这种深入带来的学习成本也很高，需要不停地跟着 Arch 社区的变化而变化。 每次更新之前需要先阅读官方升级指南，搞不好就升级给挂了。 而且 Arch 社区升级激进得有些可怕。rc.d 升级 systemctl 时候，我还能撑住， MySQL 转 MariaDB 时候，我也还凑合，但是当我安装一个 privoxy 导致 pacman 崩溃，进而不能安装程序时候，我失去了耐心。</p>

<p>想来也是，我已过折腾系统的年龄，不会给手机刷机 ROM， 而是安安本本的使用没越狱的 iPhone。越发觉得时间和精力是有限的， 需要把它们用到「正经」的地方。我对 Linux 宗教般的膜拜，也逐渐消失， 等下次 MBP 发布我就考虑出手，哈哈。</p>

<p>我曾经的签名中鲜亮的标着「ArchLinux / Python / Vim」，现在要把 ArchLinux 改成 Linuxer 了。 昨晚装了 Ubuntu 12.10，我不喜欢 Ubuntu，只是它图简单省事，社区支持丰富。 在装完之后就卸掉了几十个系统自带的应用，然后把 Awesome 桌面迁移到 Debian 环境。</p>

<p>再见，ArchLinux，我会永远感谢你的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[评论：iOS 平台是新时期的 Windows 平台]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/ping-lun-%3Aios-ping-tai-shi-xin-shi-qi-de-windows-ping-tai/"/>
    <updated>2013-05-22T14:43:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/ping-lun-:ios-ping-tai-shi-xin-shi-qi-de-windows-ping-tai</id>
    <content type="html"><![CDATA[<blockquote>如果你观察行业的历史，你就会发现，苹果如今的角色相当于微软，而三星相当于过去的苹果。从本质上，iOS 已经成为现代的 Windows。</blockquote>


<p><img src="http://resource.weiphone.com/resource/h027/h17/img201305081126550.jpg" alt="" /></p>

<p>以下为文章全文：</p>

<p>　　过去 6 个月，苹果获得的收入超过 980 亿美元，其中利润高达 220 亿美元，多亏了苹果的两大明星产品 iPhone 和 iPad，在全球的销量分别有 8500 万和 4200 万。2008 年诺基亚曾创下利润最高的移动手机制造商记录，在苹果面前顿时矮了半截。</p>

<p>　　苹果如何快而准地卷走整个移动设备行业的大部分利润，并且从此继续主导行业的方向？答案是三个因素的相互作用：一款面向大众带有明确价值的产品；一个将产品紧密联系到足以抵御竞争对手侵蚀的平台；一种刺激合作伙伴辅助性产品销量的能力。</p>

<h3>第二个 Windows 的出现</h3>

<p>　　自从苹果推出 iPhone 以来，世俗观念坚持认为，尽管苹果能够以策略制胜，令多年来老牌制造商辛苦建立的努力溃败，但苹果“不应该”能够就这么攻入智能手机行业，并且开始了看不到头的统治。</p>

<p>　　专家很早就观察着历史，反复多次提出“智能手机中的 Windows”的出现。最先是指 Palm OS 为未来智能手机中的 Windows，然后是 Linux，然后是 Windows Mobile，然后是 Symbian Foundation，然后是 Android，然后是 Windows Phone（后来还提出过是 WP 几个不同的版本）。三星在这些智能手机平台的其中一些都分别下了赌注。</p>

<p>　　如今大家似乎都默认了三星是苹果的劲敌（至少在智能手机方面），但 Asymco 市场调查机构最近指出了一个事实：“三星的利润相当于行业 5 年前的水平。苹果的利润则是其的两倍。”
　　
　　<img src="http://resource.weiphone.com/resource/h027/h16/img201305062330360.jpg" alt="" />
　　
　　　　苹果不是在一个 2007 年就存在的市场竞争。苹果已经在“原智能手机”市场之上新建了一个更大的市场，而三星事实上只是抢占了原诺基亚主导的旧市场。</p>

<p>　　如果你观察行业的历史，你就会发现，苹果如今的角色相当于微软，而三星相当于过去的苹果：一家以个人电脑起家的公司，在 Windows PC 的强势下坚强地生存下来，并剔除一些早期的竞争对手（如 Ataris、Commodores 和  Acorns），得以建立起属于自己的一小片天地，尽管在这片小天地赚的钱不如主导市场的行业巨头多。</p>

<h3>iOS 是新的 Windows</h3>

<p>　　从本质上，iOS 已经成为现代的 Windows。专家极力试图将 iPhone 的命运跟第一代 Macintosh 联系起来，然后继续幻想着谁将会是现代的微软，把苹果归为市占率不多的小众企业。因为授权给大量的硬件制造商，Android 这些年常常被认为是现代的 Windows。</p>

<p>　　问题是，那些能让微软 Windows PC 在上世纪 90 年代获得成功的几点因素（文中开头提到的三点），如今在苹果也能发现，但是在那些企图追求 Windows PC 曾经的商业成功和寿命的替代平台身上没有发现，尤其在 Android 身上看不到。</p>

<p>　　Android 大可高歌自己的成功，但它就是没有继承 Windows 那样的赚钱能力。Windows 占据英特尔 PC 的平台已超十年之久。Android 的地位类似于 WebKit，也是一个重要的平台。但苹果不是靠到处免费授权积攒起来的财富。</p>

<p>　　有点讽刺的是，三星如今扮演的是上世纪 90 年代中期老苹果的角色（在 Windows 95 猛攻下生存下来的苹果），那么谷歌的 Android 则是扮演 Classic Mac OS 的角色：也有自己的拥护者，基本上免费，虽然没有希望跟关键的大型平台那样抢占大部分的利润，但至少也在维持着行业的健康发展。</p>

<p>一款面向大众带有明确价值的产品</p>

<p>　　苹果能获得并保持今天这个位置，第一个因素解释了一家公司如何入门的。2007 年当 iPhone 面世那天，它引起了消费者的注意，令这个移动行业屏住了呼吸，很快地成为全球家喻户晓的品牌。</p>

<p>　　iPhone 是一款面向大众的带有明确价值的产品。下面这两张图很好地对比了 1993 年跟 2013 年电子设备的变化。
　　
　　<img src="http://resource.weiphone.com/resource/h027/h16/img201305062330371.jpg" alt="" />
　　
　　　　iPhone 作为一种新的计算产品，跟苹果 1984 年推出的 Macintosh 境遇是不同的。最初的 Macintosh 获得了一些关注，但价格很高，它的目标显然是面对少数渴望尝鲜的消费者，而不是大众。</p>

<p>　　Mac 推出后的十年，微软吸收了苹果在 Macintosh 概念建立起来的优势、愿景、价值，开始向 DOS PC 用户销售一个软件包，这样用户基本上相当于以更低的成本获得了一台 Mac。Windows 95 才是一款面向大众的带有明确价值的产品。</p>

<p>　　Android 不像 Windows 95，因为用户把 Android 安装到黑莓机、Palm Treo、WiMo 或 Symbian 设备不可能获得 iPhone 一样的体验。</p>

<p>　　通过对一些 Android 用户的采访发现，他们不太关心 Android 现在已经更新到什么版本了。他们使用安卓设备的心理只不过是希望尝试非苹果设备。有些用户选择安卓设备是因为价格便宜，而且这部分用户占大多数。</p>

<p>　　许多 Windows 用户不是想远离苹果，只不过想用更少的钱获得跟苹果一样的体验。于是他们把自己锁在 Windows 的生态系统中。Android 粉丝跟第一代 Mac 或 Amiga 或 OS/2 粉丝存在共同点，他们想尝试独一无二而且有趣的东西，而不仅仅是一款面向大众的带有明确价值的产品。但是不是粉丝的安卓用户对这个平台就无忠诚度可言。</p>

<h3>对一个行业分裂的影响和改变</h3>

<p>　　通过一款带明确价值的产品影响一个行业的分裂并不简单。你必须抓住大众的注意力，还要跟当前的对手竞争。如果你还没有活在对手的阴影下，对你会有些许的帮助。</p>

<p>　　微软完成从只授权 MS-DOS 向提供图形桌面计算体验的转变，跟苹果 iOS 的经历有很多共同点。</p>

<p>　　跟微软一样，苹果也有一款影响和改变行业的成功产品。事实上，苹果有两款：Mac 和 iPod。谷歌通过收购 Andy Rubin 的 Android Linux/Java 入市。不同是，MS-DOS、Mac 和 iPod 都是非常赚钱的业务，拥有忠实用户。Android 最初就是一个小众的市场参与者，就算后来被大批量安装，也不是赚钱的平台，也没有在用户群中建立起忠诚度。</p>

<p>　　MS-DOS 注定要被一个图形桌面取代。在 Windows 95 出现前几年，整个行业曾寄希望于微软和 IBM 联合开发的 OS/2 产品，或 IBM 和苹果联合创办的 Taligent 能取代 DOS。相反，微软转变自己的角色，从授权 MS-DOS 到推出 Windows。Windows 一举获得成功，以至于 OS/2 或者 Taligent 基本没有发展的余地。</p>

<p>　　同样地，2005 年许多人认为，iPod 的成功很快会 OS/2 被可播放 MP3 的智能手机所取代。相反，苹果完成了自己的转变，推出 iPhone，以及后来的 iPad，吸走了移动市场的大部分利润。</p>

<p>　　几年前还很难看出 Mac 和 PC 会慢慢被移动设备取代。2000 年，一名日本交流生告诉我，在日本已经很少人用台式电脑了，尤其是年轻一代。他们倾向于更便携的功能丰富的手机。当时很很难令人置信，但十年之后就很明显，人们更倾向于花时间摆弄智能手机，而不是坐在台式电脑前或抱着一台笔记本电脑。</p>

<p>　　将 Mac 打造成非常受欢迎的计算平台后，苹果有了第二款面向大众的产品，向 iPhone 和后来的 iPad 转变。苹果实际上结合了两款产品而得的 iPhone：iPod 的小巧便携以及 Mac 的平台和软件开发。从技术上来说，这跟微软从 MS-DOS 向 Windows 95 的转变不能等同，但也相近。都是：“一款更好、价格更亲民、价值更高的新产品”。</p>

<p>　　喜欢更新换代的用户可能在购买 iPhone 之前已经尝试过其他的智能手机，但大多数用户很快发现 iPhone 才是他们最想要的智能手机，他们从未被微软的 WinCE（嵌入式、移动计算平台的基础）体验或其他智能手机平台所动。
　　
　　<img src="http://resource.weiphone.com/resource/h027/h16/img201305072047170.jpg" alt="" />
　　
　　
　　　　何以吸引如此大的需求量，关键还是苹果强大的产品：带有明确的有价值的目的。比如苹果的手机，目的就很明确：既然你都要买一部手机，为何不买一部既能当 iPod 使，又能上网的超智能手机，总比那些复杂难懂的手机好多了。</p>

<p>　　随着其他厂商也学会了在手机提供流畅的上网体验和音乐视频播放功能，iPhone 很快被模仿者和替代者埋没。苹果继续探索，此后在 80、90 年代分别推出过激光打印机 LaserWriter、数码相机 QuickTake，不过最终没能在这些领域占据主导地位。</p>

<p>　　那么是什么让苹果将 iPod、iPhone 和 iPad 从新鲜的产品转为长远的商业模式，并保持在移动设备中的主导地位？</p>

<h3>牢不可破的平台</h3>

<p>　　第二个成功因素就是牢不可破的平台，一个苹果围绕 iTunes 建立起来的生态系统。iTunes 包括资源库和商店，同步内容操作简单，还特别在某些重要领域播下种子：如在教育领域投放 iTunes U，为企业用户提供的支持，精心建立起的 iOS 应用开发市场。</p>

<p><img src="http://resource.weiphone.com/resource/h027/h16/img201305072047171.jpg" alt="" /></p>

<p>　　过去苹果为维持 Mac 平台和留住开发者煞费心思，开发者们都纷纷跑到 Windows 平台了。现在苹果为 iOS 所做的一切更费心思，因为他们深知开发者对一个平台是多么重要。建立一个新平台不难，但是要在一个已经非常成功的大型平台阴影下生存，那才是异常困难的。</p>

<p>　　谷歌（Android）、三星（TouchWiz/BADA/Tizen）、亚马逊（Kindle）和微软（Windows Phone）都在为各自的平台建立类似的移动生态系统，但他们只能影响和改变到那些只求低价手机的小部分用户。这部分用户对这个平台和生态系统没有兴趣，固然不会欣赏开发者为之付出的努力，他们对平台而言价值不高。这些平台都要在一个已经成功的平台下生存：iOS。
　　
　　
　　
　　　　上世纪 90 年代，苹果是怎么在 Windows 的强势攻击下生存的？因为苹果已经拥有属于自己的小众用户，这批用户愿意在硬件方面投入更多资金。许多 Windows PC 用户笑称，谁会傻到掏更多的钱买 Mac？事实上，这些小众的用户令这个平台活跃起来。90 年代中，苹果也开始尝试追求纯粹的市场份额，于是推出像 Performa 系列这样的低价电脑。虽然的确能为苹果带来更多追求低价的用户，但对这个平台的价值不高。</p>

<p>　　微软和诺基亚进入智能手机市场时也是通过低端机作为切入点，确实帮助他们抢占到一定的市场份额，但对平台的生态系统没有多少价值的影响。低端市场的用户极少在应用程序和内容方面投资，也就不能带动新的应用程序和内容的开发。</p>

<p>　　微软没能成功权衡和改变它在 Windows PC 非常强势的地位，没能成功建立起一个牢不可破的平台。Metro 是微软为此做出的努力，但显然没有成功。</p>

<p>　　同样地，谷歌对 Android 软件平台开发的管理也导致了应用平台不够牢不可破，难以阻止 Android 用户转投 iOS 平台。即使是对 Android 硬件满意的用户，他们也会额外购买一台 iPod touch 或 iPad，从 iOS 平台获取他们想要的应用。</p>

<p>　　当年 Mac 平台也是这样被 Windows 欺负着，今天，苹果加倍努力让 iOS 成为移动平台界的 Windows，让别人的平台活在它的阴影之下。</p>

<p>　　首先要有好的产品，然后围绕产品建立起牢不可破的生态系统，这已经是老生常谈的苹果成功秘诀了。但是还有第三个因素鲜有人提到。</p>

<h3>刺激合作伙伴辅助性产品的销量</h3>

<p>　　当年微软通过模仿 Mac 的桌面环境发布了 Windows 95，它利用曾经是 MS-DOS 授权商的背景，与英特尔和多家 PC 硬件制造商建立起紧密的市场合作。Windows 在硬件制造商看来是一个杀手锏，可以用来跟苹果的 Macintosh 争市场。</p>

<p>　　微软卷走 PC 行业大部分的利润，但也帮助英特尔卖出芯片，帮助硬件制造商卖出 PC。此前英特尔和硬件制造商也能从 Unix PC 或 DOS PC 中赚钱，但 Windows 是顾客点名要的桌面平台，这使得他们能从中赚更多，多到足以促使英特尔和 PC 制造商此后毫不犹豫地支持微软的其他平台，成为微软的终身奴仆，尽管他们明白单一的平台不利于长期的发展。</p>

<p>　　最终，PC 制造商放弃了支持 OS/2、Linux 和 Chrome OS 等替代平台，只提供顾客要求的 Windows。在有利可图的时候，PC 制造商对 Windows 毫无怨言，可当 Windows 8 不再为他们带来销量的增长时，他们开始有了抱怨。</p>

<p>　　同样地，苹果在创造消费者对 iPhone 巨大需求量之后，还刺激了用户对数据流量的需求。苹果不像微软那样选择跟硬件制造商合作，而是跟运营商合作。顾客点名要买 iPhone，这种优势使得苹果在跟运营商合作中掌握更多控制权，如 AT&amp;T 自愿将应用和内容销售、软件更新和可视语音邮件等关键服务交给苹果控制，因为 iPhone 帮助运营商刺激更多数据服务的需求。</p>

<p>　　1995 年的微软拥有强势的市场地位，几乎所有 PC 制造商都支持 Windows 系统。苹果只能循环渐进地跟全球的运营商达成合作。iPhone 上市四年后才跟美国第二大运营商 Verizon 达成协议。将近一年后才跟第三大运营商 Sprint 合作，添加了几家美国预付费运营商为合作伙伴。直到第六年才完全跟美国前五家运营商达成合作。</p>

<p>　　想象一下，如果微软开始只跟惠普合作 Windows 95，然后到 1999 年才跟戴尔合作，并且直到 2001 年才完成与主要 PC 制造商的合作，那将会是怎样的结果？苹果才刚刚达成跟全球主要运营商的合作，令人难以置信，三星、诺基亚和黑莓在全球合作的运营商都比苹果的多。</p>

<p>　　微软跟 PC 制造商合作时，要求联合营销和独家协议，苹果向运营商要求的更多：掌握用户、控制产品设计和软件服务、承诺销量、预付货款。这些苛刻条款解释了为什么苹果需要花如此长的时间才跟运营商谈成合作。</p>

<p>　　也就苹果才有底气要求这些，因为它有两个因素在握：具有明确价值面向大众的产品，和一个牢不可破的平台。证明了 iPhone 能帮运营商获得更多数据服务用户后，苹果还能向运营商要求更多。</p>

<p>　　许多运营商开始坚决反对跟苹果合作，直到他们意识到已无可选择，足以证明苹果在谈判中的话语权。根据 Dediu 的图表，iPhone 对运营商来说成本很高，正如 Windows 比 DOS 或 Linux 更贵一样的道理。但是就跟当年 PC 制造商无法拒绝 Windows 一样，iOS 的需求量令运营商不得不接受苹果苛刻的条款。
　　
　　<img src="http://resource.weiphone.com/resource/h027/h16/img201305072047172.jpg" alt="" />
　　
　　
　　　　2008 年底，在与黑莓合作推出类似 iPhone 的 Storm 智能手机失败后，Verizon 将赌注押在 Android，再一次试图复制 iPhone 吸引顾客的能力，从而销售数据合约。2009 年 Verizon 在一则叫 iDont 的广告中嘲笑 iPhone，并在 2010 年的 Motorola Droid X 广告中企图靠抨击 iPhone 来突出 Droid X。</p>

<p>　　然而，Android 作为一个平台，并不能像 iPhone 那样可为 Verizon 吸引有价值的顾客。结果，Verizon 还是在 2010 年底接受了 iPad，并在 2011 年初与苹果合作推出了 CDMA 版 iPhone 4。iPhone 4 为 Verizon 带来史上最高的首发销量。</p>

<p>　　Sprint 和 T-Mobile 也曾经向投资者承认，顾客流失到竞争对手的首要原因是，他们没有销售 iPhone。在 Sprint 终于跟苹果合作后，他们也宣布 iPhone 是他们最成功的智能手机首发。</p>

<p>　　2011 年底，美国第五大运营商 U.S. Cellular 的首席执行官玛丽·迪伦称，他们之所以不销售 iPhone 是因为要预付的资金太高，从利润和风险的角度权衡，这笔投资难以接受。</p>

<p>　　一个月后，U.S. Cellular 母公司 TDS 的首席执行官解释，他们先搭建好 4G LTE 服务再考虑引进 iPhone。</p>

<p>　　他说：“我们绝不是说永不销售 iPhone。iPhone 需要符合我们的发展方向才会有考虑的机会。”</p>

<p>　　不久之后，迪伦的态度也有了 180°大转弯：“我们推出了多项旨在提升用户忠诚度和吸引新顾客的的策略，其中包括今年晚些时候跟苹果的合作。”</p>

<p>　　如 Dediu 所言：“U.S. Cellular 承诺三年内采购价值 12 亿美元的 iPhone。大约是 200 万部手机。”</p>

<p>　　为什么迪伦的态度能在短时间内发生如此大的变化？美联社报道说：“在她公开表示拒绝销售 iPhone 后的 18 个月里，U.S. Cellular 流失了 26.8 万客户，相当于 5% 的合约计划，而且是利润最高的合约。”</p>

<h3>注定走 Windows 的路子？</h3>

<p>　　苹果跟微软一样，苹果也拥有巨大的平台优势。但如果苹果无法持续将 iPhone 打造成为一款面向大众具有明确价值的产品，并且保持 iOS 平台的牢不可破和黏性，苹果的平台优势将会渐渐削弱。如果苹果未来不再能够刺激合作伙伴辅助性产品的销量，iOS 也将面临危机。</p>

<p>　　随着 iPad 对电脑行业的日益侵蚀，Windows 平台正失去它的统治地位，Windows 电脑也不再是面向大众价值明确的产品。Windows 本身也不再是一个牢不可破黏性超强的平台。渐渐地，Windows 也不再能刺激合作伙伴辅助性产品的销量。要想避免走微软的老路，苹果还需吸取 Windows 的教训。</p>

<p>　　Windows 的教训有哪些？例如，忽视 Windows XP 的安全漏洞、在消费者毫无准备之时推出类似于 Windows Vista 的重大变革、花费数十亿美元仅为了模仿竞争对手（推出的 Zune、Slate PC 和 Surface 等），而没有找出创新的新业务。目前来看，苹果避免了这些陷阱，但 Android 却陷了进去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微软推出正式发布Xbox One：强调语音和手势控制]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/wei-ruan-tui-chu-zheng-shi-fa-bu-xbox-one%3Aqiang-diao-yu-yin-he-shou-shi-kong-zhi/"/>
    <updated>2013-05-22T14:24:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/wei-ruan-tui-chu-zheng-shi-fa-bu-xbox-one:qiang-diao-yu-yin-he-shou-shi-kong-zhi</id>
    <content type="html"><![CDATA[<blockquote>
微软今天举行Xbox发布会，在会上微软推出下一代Xbox，名为“Xbox One”。微软互动娱乐业务总裁唐·马特里克(Don Mattrick)认为，家庭起居室已经碎片化，而Xbox One要统一体验。他说：“Xbox团队有一个新目标，就是一体化。”它必须简洁、即时、完整。为此，所有一切都要在一个系统中。</blockquote>


<p>Xbox One配有8GB RAM，蓝光光驱，本地64位架构。一些传言被证实，比如蓝光，HDMI输入和输出。最核心的是三个操作系统合为一体。也就是：Xbox操作系 统，Windows Kernel，连接两个系统用于多任务；三者合为一体。惠顿称：“只有微软能做到这点。”每一台Xbo One都会配有Kinect。</p>

<p>除了硬件，Xbox Live也将全面云化。微软准备了30万台服务器，可以让用户远程存储资料。</p>

<p>一些游戏商也前来捧场。游戏商艺电为Xbox One准备了四款游戏：FIFA，Madden NFL，NBA Live和UFC。动视暴雪也将提供《使命召唤：幽灵》。</p>

<p>微软Studio为游戏机准备了15款独家游戏，当中8款是全新的。</p>

<p>下面是一些现场的简报：</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405601902898765.jpg" alt="" /></p>

<p>XBOX要让起居室一体化</p>

<p>发布会开始后，微软互动娱乐业务总裁唐·马特里克(Don Mattrick)上台主持。他说：“你们的电视更智能了，我们在Xbox Live上很早就下了赌注。”马特里克感谢大家，他说：“今天我们要向前看。”要向电视和游戏进军。</p>

<p>家人会玩休闲游戏，也会看电视。既在大屏幕上看，也在小屏幕上看。还有语音和手势，还有云计算。马特里克说：“我们为迷人的问题带来迷人的答案。”</p>

<p>马特里克称游戏是一个年规模650亿美元的产业。尽管他这样说，游戏产业近来发展缓慢，整个产业都期待下一代Xbox能带来新意。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405611062603938.jpg" alt="" /></p>

<p>马特里克跟着说，起居室已经碎片化，微软希望能让它和协起来。他说：“Xbox团队有一个新目标，就是一体化。”它必须简洁、即时、完整。为此，所有一切都要在一个系统中。</p>

<p>推出Xbox One</p>

<p>马特里克认为：“是时候让技术退居幕后了。今天我们将看到最终的一体家用娱乐系统。”微软管它叫Xbox One。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405621515107556.jpg" alt="" /></p>

<p>随后视频上显示一个黑色盒子。没有谈及细节。</p>

<p>马特里克说：“这就是Xbox One。”体积看起来与目前的Xbox相当。他说：“从开发的第一天就要让人震惊。”未来会更好。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/064056362643378.jpg" alt="" /></p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405641547688314.jpg" alt="" /></p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405651322223057.jpg" alt="" /></p>

<p>随后，微软尤素夫·梅赫蒂(yusuf mehdi)上台介绍游戏机细节。他说：“我们沉迷于每一个有限的细节。”微软娱乐部门多年来很专注于设计。</p>

<p>梅赫蒂称：“我喜欢游戏。”</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/0640566144150067.jpg" alt="" /></p>

<p>梅赫蒂说：“如果一款单一设备能提供所有娱乐给你？会怎么样？如果它已经准备就绪且能互联会如何？”梅赫蒂喊了声“Xbox On”，游戏机就打开了。</p>

<p>游戏机的操控界面与目前的Xbox相似。</p>

<p>梅赫蒂在微软干了许多年，曾在许多部门呆过。在进入娱乐集团之前在Bing工作。</p>

<p>新Xbox主屏会识别用户身份，载入用户喜欢的程序和游戏。上次你玩什么它也记得，内容会弹出在主屏上。</p>

<p>界面上有一个标签叫“Trending（趋势）”，它可以显示朋友喜欢的游戏、还有社交流行的游戏。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405771063513190.jpg" alt="" /></p>

<p>上面有游戏，也有电视和电影，还有音乐和程序。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/0640579813441104.jpg" alt="" /></p>

<p>梅赫蒂喊了一声“Xbox Home”，游戏机就回到主屏。看来可以用语音控制。他说了句“Watch TV（看电视）”，游戏机就播放电视。</p>

<p>游戏机还可以快速切换。当梅赫蒂说：“游戏”“音乐”“看电视”，游戏机可以在功能间快速切换。它可以像电视遥控一样快速换频道。用户还可以用手势控制电视体验。</p>

<p>Snap mode（捕捉模式）可以在一个屏幕上显示多个节目。</p>

<p>从演示来看，微软在新Xbox中力推手势和语音控制。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405710354778893.jpg" alt="" /></p>

<p>梅赫蒂在游戏机上演示了Skype，它支持HD，可以进行群视频通话。这并不意外，只是微软特别针对Xbox调整了Skype，只有在Xbox上才支持群视频通话。</p>

<p>2年前微软收购了Skype，之后将产品引入到自己的许多产品中。</p>

<p>梅赫蒂跟着介绍电视指南。看起来导航有点像Windows多媒体中心。导航显示了本地电视台列表，操作者通过语音就能跳到选定的节目上。比如：“看MTV频道……科幻频道，或者HBO在哪里？”</p>

<p>总之，你下什么命令就跳到什么频道，响应速度很快。</p>

<p>有意思，但不并奇怪，微软今天的介绍没有多谈游戏。还有3周就会召开E3游戏大会，到时微软才会谈游戏，今天谈的是非游戏功能。</p>

<p>用户还可以收藏喜欢的频道，方便快速打开。“Trending（趋势）”页面可以显示Xbox网络中的热门内容。</p>

<p>梅赫蒂说，游戏、电影、音乐、WEB、Skype和直播电视，全都在Xbox One中。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/064057122038068264.jpg" alt="" /></p>

<p>观看ESPN [保存到相册]</p>

<p>随 后谈论控制器，输入设备和新Xbox Live。负责介绍的是微软Xbox Live业务总经理马克·惠顿（Marc Whitten），他说微软在新系统上做了三项投资，它们是：主机，输入（如Kinect和控制器）、云基础Xbox Live。Xbox One配有8GB RAM，蓝光光驱，本地64位架构。一些传言被证实，比如蓝光，HDMI输入和输出。</p>

<p>最核心的是三个操作系统合为一体。也就是：Xbox操作系统，Windows Kernel，连接两个系统用于多任务；三者合为一体。惠顿称：“只有微软能做到这点。”</p>

<p>每一台Xbox One都会配有Kinect。</p>

<p>将Windows kernal植入Xbox是有意义的，开发者开发程序会更容易。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405713642818422.jpg" alt="" /></p>

<p>游戏机还配有1080p HD RGB摄像头，30 FPS色彩。TOF技术（可以提高数据传输速度，最高每秒2GB）。</p>

<p>新游戏机有40项设计创新。惠顿说：“它是游戏者开发的，是为游戏者设计的。”</p>

<p>例如Smart Glass，它已经在Xbox 360上下载1000万次。新Kinect传感器可以连接一切，包括控制器、平板、智能手机，只要运行Smart Glass即可。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405715313073377.jpg" alt="" /></p>

<p>新的Xbox Live是建立在Xbox One之上的，原来Xbox Live由500台服务器支持，到了Xbox 360时增至3000台，现在，Xbox One会用30万台服务器支持。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405817633098387.jpg" alt="" /></p>

<p>由于服务器增加，音乐、游戏都可以保存在云中。</p>

<p>游 戏开发商EA体育部主管威尔逊（Andrew Wilson）上台，他说游戏应该动态且有趣。它带来四款游戏：FIFA，Madden NFL，NBA Live和UFC。未来12个月都会推出，他说：“游戏会从根本上改变玩游戏的方式。”游戏由新技术EA Sports Ignite支持，它是一个新引擎。</p>

<p>EA宣称要为游戏带来“有生命的世界”。它播放一段视频，谈的是玩家如何移动，如何与物理互动。</p>

<p>惠顿说：“体育主要与头、脚、手有关。”新游戏每秒计算量多四倍，从而带来“人一样的智能”。动画和细节要丰富10倍。</p>

<p>随后EA又视频演示了《FIFA14：终极团队》以及橄榄球、篮球游戏。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/06405823953299293.jpg" alt="" /></p>

<p>微软Studios部门主管斯宾塞(Phil Spencer)上台，他说新Xbox One有许多独家的东西，这点与之任何一代产品都不同。</p>

<p>斯宾塞说全球各地的团队都在为 Xbox One开发产品。比如，赛车游戏《Forza 5》将进入Xbox One。产品一上市就会有Forza 5。</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/064058251892129625.jpg" alt="" /></p>

<p>微软Studios总计将推出15款独家游戏，8款全新。</p>

<p>随 后，微软娱乐和数字媒体部总裁Nancy Tellem上台。她之前在CBS工作，现在运营微软洛杉基游戏工作室。Tellem称，在CBS和华纳兄弟工作时，她认识到故事、艺术形式的威力。到目 前为止，电视观看体验仍然是单向的。她认为：“电视将个性化，今天它还没有社交化。”</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/064058271781399103.jpg" alt="" /></p>

<p>动视暴雪CEO埃里克·赫什伯格（Eric Hirshberg）也来捧场。他展示了 《使命召唤10：幽灵（Call of Duty: Ghosts）》在新Xbox的运行视频。赫什伯格承诺：“会带来全新的世界，全新的故事。”</p>

<p><img src="http://img.cnbeta.com/newsimg/130522/064059301598515615.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“贷款分期买iPhone”大忽悠 年利率竟超45%]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/dai-kuan-fen-qi-mai-iphone-da-hu-you-nian-li-lu-jing-chao-45-percent/"/>
    <updated>2013-05-22T14:15:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/dai-kuan-fen-qi-mai-iphone-da-hu-you-nian-li-lu-jing-chao-45-percent</id>
    <content type="html"><![CDATA[<blockquote>5月20日一大早，武汉大三在校女生小冰（化名）在接到一个电话后，情绪就陷入烦躁之中。“别人都在过网络情人节，我却接到催款电话。”小冰不想接的电话，来自于捷信中国。去年8月，她在武汉广埠屯一手机卖场买了一部iPhone4S手机（售价为4988元），交了1988元现金，另外的3000元从捷信中国贷款，分12个月偿还，每个月还款369元，本息等共计4428元。</blockquote>


<p>昨日，武昌广埠屯一商场手机柜台上写着“捷信欢迎使用分期付款”字样。</p>

<h3>不少消费者无力支付拒绝履约，欲联合起诉捷信中国</h3>

<p>5月20日一大早，武汉大三在校女生小冰（化名）在接到一个电话后，情绪就陷入烦躁之中。“别人都在过网络情人节，我却接到催款电话。”</p>

<p>小冰不想接的电话，来自于捷信中国。去年8月，她在武汉广埠屯一手机卖场买了一部iPhone4S手机（售价为4988元），交了1988元现金，另外的3000元从捷信中国贷款，分12个月偿还，每个月还款369元，本息等共计4428元。</p>

<p>“算下来年利率高达47.6%，这么高的利率完全就是高利贷，我拒绝履约。”小冰认为自己掉入了“陷阱”，在还款6期后，拒绝继续履约。</p>

<p>麻烦随之而来。“捷信中国每天不断地打催款电话，并以通知公安局抓人等方式威胁……我的生活完全被扰乱了。”小冰在咨询律师后了解到，如果民间借贷利率高于同期银行贷款利率4倍，高出部分不受法律保护，贷款人可以不还高出部分。</p>

<p>如今，许多与小冰有同样遭遇的消费者在网上组成“反捷信联盟”，欲联名向法院起诉捷信中国。</p>

<h3>一天接14个催款电话 生活被电话“绑架”</h3>

<p>小冰说，她现在的生活，完全被“电话”绑架。“当时捷信的业务员说每天的利率是千分之一左右，每个月只需要还款369元，觉得能承受就签了合同。”小冰称，拿到手机时很兴奋，想都没想就签了合同，但之后细算起来，贷款年利率高达47.6%。</p>

<p>大四在校生、22岁荆州男孩张松（化名）也在5月20日接到催款电话。“基本上每天都打，从早上8点一直打到晚上11点，一天大概打十四五个，有时候还威胁我。”张松对此感到十分无奈。</p>

<p>张 松买的也是iPhone4S，去年5月初他买手机时，销售称4500元的4S手机首付900元就能拿走，可以分12个月还款，每个月只需还三四百元。销售 员叫来卖场的捷信工作人员，对方称贷款3600元，每天利率是千分之一，每个月只需还441元，扫了一眼合同，张松签下了自己的名字。</p>

<p>然而第二天回到家细看合同时，张松发现，合同上竟然没有写明还款总额。等他算出要还本息共5292元后，才发现自己陷入高利贷陷阱，“年利率高达47%，银行才6%”。</p>

<p>张松每个月只有800元生活费，在节衣缩食按时还款几个月后，有点受不了了。“每个月359元的生活费根本不够用”，最后张松只好去了一家KTV做兼职。</p>

<h3>“合同条款有的字号太小，没看清就签了字”</h3>

<p>“违 约”的痛苦，已完全取代了当初买手机时的愉悦。今年3月张松没有能力继续还款，于是停止还款。“那个月月底，有个武汉座机号一直打我手机，每天打十几个催 我还钱。”张松说，他把该座机号加入黑名单后，对方又换了几个座机打，“光座机黑名单我就加了十几个”。最后捷信工作人员改用手机打，每次接电话张松都称 没钱，这样说了几次后，对方开始威胁称，如果不还钱就打到他老家村委会。</p>

<p>“合同上字体大小不一样，有些字一眼就能看清，还有些涉及还款内容和利率的字实在太小，看起来很费力。”在捷信办过手机贷款的在校大学生李奇（化名）称，而且签合同的时候，捷信工作人员一直催着签字，自己在迷迷糊糊中签了字。</p>

<h3>反应：消费者欲联名起诉维权</h3>

<p>每天的利率是千分之一，那如果按每天1‰的利率来算，年利率仅为36.5%，可为何会变成47.6%呢？</p>

<p>某手机卖场一位捷信工作人员称，每天千分之一的利率包括了贷款利息、手续费、担保费等，贷款3000元每天只需交3元左右的利息，不同还款期限的利率之间会有微小的差别，具体的还款额要用公司的一套专业系统来测算。</p>

<p>据了解，捷信中国今年年初的一项统计数据显示，从2012年1月至今年2月底，有2万多名武汉大学生申办了“消费金融”服务。如今，很多办理过捷信贷款业务的消费者在网上组成了反捷信联盟，欲联名向法院起诉。</p>

<p>昨 日，记者在QQ上搜索发现，以“反捷信”为关键词的联盟群就有56个，其中人数最多一个群里有818个成员，粗略计算至少有3000人加入了这些群。随 后，记者随机加入一些群发现，群里的人都称拒绝还款，还有人甚至收到一张署名为“深圳市融关资产管理有限公司不良欠款专案组”的立案告知函。</p>

<h3>律师说法：高于银行利息4倍的部分可以不还</h3>

<p>山东天宇人律师事务所律师刘书庆表示，签了合同就要按约还款，但是由于捷信收取的利息高于银行同期的4倍，而高出的部分不受国家法律保护，所以高出的部分贷款人可以不还。</p>

<p>刘书庆称，消费者与捷信所签的合同就是证据，凭着这些合同，贷款人可以向法院申请不还超过银行贷款利息4倍以上的款额。</p>

<p>昨日下午4点，记者辗转联系上捷信中国总部公关部发言人唐女士，她让记者把问题写下来通过电子邮件发给她。然而等到6点，记者都没有收到回复邮件，再打电话过去，对方要么正在通话，要么电话无人接听。直到晚上9点发稿时，记者都联系不上对方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[消息称谷歌原生版Galaxy S4仅在美国发行]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/xiao-xi-cheng-gu-ge-yuan-sheng-ban-galaxy-s4jin-zai-mei-guo-fa-xing/"/>
    <updated>2013-05-22T13:48:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/xiao-xi-cheng-gu-ge-yuan-sheng-ban-galaxy-s4jin-zai-mei-guo-fa-xing</id>
    <content type="html"><![CDATA[<blockquote>5月22日消息，据国外媒体报道，科技网站CNET英国版声称，谷歌日前透露，原生安卓版Galaxy S4将于6月26日上市，且仅在美国发行，售价649美元。CNET称，谷歌拒绝透露，该公司最终是否会把这款手机推向全球其他国家。 Phonearena猜测，将原生Galaxy S4推向全球市场应该主要存在两个阻碍。</blockquote>


<p><img src="http://img.cnbeta.com/newsimg/130522/1341180729668608.jpg" alt="Galaxy S4" /></p>

<p><em>消息称谷歌原生版Galaxy S4仅在美国发行（TechWeb配图）</em></p>

<p>第一阻碍是LTE网络兼容问题。谷歌在开发者上 称，原生Galaxy S4兼容美国运营商T-Mobile和AT&amp;T的LTE网络，此外并未透露其他细节。因此，有理由预测，原生Galaxy S4并非支持所有LTE网络，这会成为阻碍其进入广泛全球市场的一个因素。</p>

<p>第二阻碍是与三星公司的协议。谷歌原生版Galaxy S4与三星版Galaxy S4存在直接竞争关系，考虑后者刚刚在全球发行不久，三星应该和谷歌签署的一些协议，确保三星版Galaxy S4在全球市场的销量不受太大影响。因此，这个阻碍会近一步限制谷歌原生版Galaxy S4发行市场范围。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试发布]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/ce-shi-fa-bu/"/>
    <updated>2013-05-22T11:58:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/ce-shi-fa-bu</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新文章名称]]></title>
    <link href="http://www.11it.com/blog/2013/05/22/xin-wen-zhang-ming-cheng/"/>
    <updated>2013-05-22T11:07:00+08:00</updated>
    <id>http://www.11it.com/blog/2013/05/22/xin-wen-zhang-ming-cheng</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
